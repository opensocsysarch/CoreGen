//
// _CoreGenCodegen_cpp_
//
// Copyright (C) 2017-2018 Tactical Computing Laboratories, LLC
// All Rights Reserved
// contact@tactcomplabs.com
//
// See LICENSE in the top level directory for licensing details
//

#include "CoreGen/CoreGenCodegen/CoreGenCodegen.h"

CoreGenCodegen::CoreGenCodegen(CoreGenNode *T,
                               std::string BD,
                               CoreGenErrno *E)
  : Top(T), BaseDir(BD), Errno(E) {
}

CoreGenCodegen::~CoreGenCodegen(){
}

bool CoreGenCodegen::ExecuteLLVMCodegen(){
  return true;
}

bool CoreGenCodegen::BuildChiselDir(){
  if( BaseDir.length() == 0 ){
    Errno->SetError(CGERR_ERROR, "Base directory cannot be null" );
    return false;
  }
  FullDir = BaseDir + "/chisel/src/main/scala";
  if( !CGMkDir(FullDir) ){
    Errno->SetError(CGERR_ERROR, "Could not construct chisel source tree: "
                    + FullDir );
    return false;
  }
  return true;
}

bool CoreGenCodegen::BuildChiselMakefile(){
  if( BaseDir.length() == 0 ){
    Errno->SetError(CGERR_ERROR, "Base directory cannot be null to generate makefile" );
    return false;
  }

  std::string MFile = BaseDir + "/chisel/Makefile";
  std::ofstream MOutFile;
  MOutFile.open(MFile,std::ios::trunc);
  if( !MOutFile.is_open() ){
    Errno->SetError(CGERR_ERROR, "Could not open chisel makefile: " + MFile );
    return false;
  }

  MOutFile << "#!/bin/bash" << std::endl << "#" << std::endl;
  MOutFile << "# Chisel makefile autogenerated by System Architect" << std::endl;
  MOutFile << "# " << CGCurrentDateTime() << std::endl << std::endl;

  // output build directives
  // TODO

  // output clean directive
  MOutFile << "clean:" << std::endl;
  MOutFile << "\t@echo \"Cleaning Verilog Source\" && rm -Rf generated-src" << std::endl;

  MOutFile.close();
  return true;
}

bool CoreGenCodegen::ExecuteChiselCodegen(){

  // Stage 1: Build the Chisel directory structure
  if( !BuildChiselDir() ){
    return false;
  }

  // Stage 2: Walk the top-level modules and generate chisel

  // Stage 3: Build the Chisel makefile
  if( !BuildChiselMakefile() ){
    return false;
  }

  return true;
}

bool CoreGenCodegen::Execute(){
  if( !ExecuteChiselCodegen() ){
    return false;
  }
  if( !ExecuteLLVMCodegen() ){
    return false;
  }
  return true;
}

// EOF
